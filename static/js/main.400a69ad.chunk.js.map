{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","key","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"0TAiCeA,MA7Bf,YAA0D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC7C,OACE,yBAAKC,UAAU,SACb,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,eACb,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,UACXD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACV,wBAAIC,IAAOD,EAAOL,UAAU,iBAAiBI,OAGjD,uBAAGJ,UAAU,kBAAkBH,EAAQU,MAAM,EAAG,KAAhD,UCmDOC,G,kNA3DbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IACd,4DANQ,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAMZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IATzB,2C,kEAaVQ,KAAKN,c,+BAaG,IAAD,EACuBM,KAAKT,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,6BAASX,UAAU,aAChBU,EACC,yBAAKV,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAGF,yBAAKA,UAAU,UACZW,EAAOR,KAAI,SAACgB,GAAD,OACV,kBAAC,EAAD,CACEb,IAAKa,EAAMC,GACXA,GAAID,EAAMC,GACVzB,KAAMwB,EAAMxB,KACZC,MAAOuB,EAAMvB,MACbC,QAASsB,EAAMtB,QACfC,OAAQqB,EAAME,mBACdtB,OAAQoB,EAAMpB,kB,GAlDZuB,IAAMC,YCMxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,a","file":"static/js/main.400a69ad.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({ year, title, summary, poster, genres }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      <img src={poster} alt={title} title={title} />\r\n      <div className=\"movie__data\">\r\n        <h3 className=\"movie__title\">{title}</h3>\r\n        <h5 className=\"movie__year\">{year}</h5>\r\n        <ul className=\"genres\">\r\n          {genres.map((genre, index) => (\r\n            <li key = {index} className=\"genres__genre\">{genre}</li>\r\n          ))}\r\n        </ul>\r\n        <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n//function component의 인자로 props 말고 props의 특정 값만 가져올 때는 꼭 curly bracket으로 감싸야함\r\n\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n//위에 있는 id, year, title, summary, poster 가  Prop\r\n\r\nexport default Movie;\r\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n//import logo from './logo.svg';\n// import PropTypes from \"prop-types\";\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: [],\n  };\n\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies },\n      },\n    } = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n    );\n    // console.log(movies);\n    this.setState({ movies, isLoading: false });\n  };\n  //await: axios가 끝날 때 까지 기다렸다가 계속\n  componentDidMount() {\n    this.getMovies();\n  }\n  // setTimeout( () => {\n  //   this.setState({ isLoading: false});\n  // }, 6000);\n  // fetch위에 있는 작은 layer\n  //데이터를 잡기 위해\n\n  //this will happen after 6 seconds\n  //이론적으로 componentDidMount에서 data를 fetch 함\n  //axios.get는 시간이 오래 걸릴 수 있으므로 javasscript에게 componentDidMount함수가 끝날 때 까지\n  //약간 시간이 걸릴 수 있다고 말해야 함.\n\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map((movie) => (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n// const foodILike = [\n//   {\n//     id:1,\n//     name: \"Kimchi\",\n//     image:\n//       \"https://kstory365.files.wordpress.com/2015/01/kimchi-01-cabbage.jpg\",\n//     rating: 3\n//   },\n//   {\n//     id:2,\n//     name: \"bulgogi\",\n//       image:\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/eb/%ED%8C%8C%EB%B6%88%EA%B3%A0%EA%B8%B0.JPG/1024px-%ED%8C%8C%EB%B6%88%EA%B3%A0%EA%B8%B0.JPG\",\n//     rating: 4\n//     },\n//   {\n//     id:3,\n//     name: \"kimbap\",\n//     image:\n//       \"https://recipe1.ezmember.co.kr/cache/recipe/2016/06/29/e7401296033ab8e4297cd53d71e1bba91.jpg\",\n//     rating: 4.9\n//     },\n//   {\n//     id:4,\n//     name: \"samgyetang\",\n//     image:\n//       \"https://img.seoul.co.kr//img/upload/2019/07/25/SSI_20190725184016.jpg\",\n//     rating: 4.8\n//     },\n// ];\n\n// function renderFood(dish){\n//   console.log(dish);\n//   return <Food name = {dish.name} picture={dish.image} />\n// }\n\n// function Food({ name, picture, rating }) {\n//   //console.log(props.fav);\n//   return (\n//     <div>\n//       <h2>I like {name} </h2>\n//       <h4>{rating}/5.0</h4>\n//       <img src={picture} alt={name} />\n//     </div>\n//   );\n// }\n\n// Food.propTypes = {\n//   name: PropTypes.string.isRequired,\n//   picture: PropTypes.string.isRequired,\n//   rating: PropTypes.number,\n// };\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     console.log(\"hello\");\n//   }\n//   state = {\n//     count: 0,\n//   };\n\n//   add = () => {\n//     //console.log(\"add\");\n//     this.setState(current => ({count: current.count + 1}));\n//   };\n\n//   minus = () => {\n//     // console.log(\"minus\");\n//     this.setState(current => ({count: current.count - 1}));\n//   };\n\n//   componentDidMount(){\n//     console.log(\"component rendered\");\n//   }\n\n//   componentDidUpdate() {\n//     console.log(\"I just updated\");\n//   }\n\n//   // componentWillMount(){\n//   //   console.log(\"Goodbye, cruel world\")''\n//   // }\n\n//   render() {\n//     console.log(\"Im rendering\");\n//     return (\n//       <div>\n//         <h1> The number is: {this.state.count}</h1>\n//         <button onClick={this.add}>Add</button>\n//         <button onClick={this.minus}>minus</button>\n//       </div>\n//     );\n//   }\n// }\n//react는 자동적으로 너의 class component의 render method를 실행해! 자동으로!\n//class component는 우리가 원하는 state라는 녀석을 가지고 있음 \\\n//state는 object이고 component의 data를 넣을 공간이 있고, 이 데이터는 변함\n//this.add() -> 즉시, this.add -> 클릭 할 때만\n//setState를 사용하지 않으면 새 state와 함께 render function이 호출되지 않을 거야\n//매 순간 너가 setState를 호출할 때 마다 react는 새로운 state와 함께 render function을 호출할 꺼야\n\n// function App() {\n//   return (\n//     <div>\n//       {foodILike.map(dish =>(\n//         <Food key = {dish.id} name = {dish.name} picture={dish.image} rating={dish.rating} />\n//       ))}\n//       {/* map은 여기서 뭐가 돌아오든 array로 돌려줌 */}\n//       {/* <h1>Hello!</h1> */}\n//       {/* {foodILike.map(dish => <Food name = {dish.name} picture = {dish.image}/>)} */}\n//       {/* <Food fav=\"kimchi\" />\n//       <Food fav=\"ramen\" />\n//       <Food fav=\"meat\" /> */}\n//       {/* html의  <div class= \"hello\"> </div> 와 유사*/}\n//       {/* food component에 fav라는 이름의 property를 kimchu라는 value로 줌  */}\n//     </div>\n//   );\n// }\n//react는 당신이 거기에 쓰는 모든 요소를 생성함!\n//자바스크립트와 함께 그것들을 만들고\n//그것들을 html로 만듬\n//너의 모든 react application을 div 사이에 넣어! ok?\n//react는 소스코드에 처음부터 html를 넣지않고, html에서 html을 추가하거나 제거하는 법을 알고 잇음\n//그래서 application이 이것을 로드할 때, 빈 html을 로드하게 되고\n//그런 다음에 내가 component에 작성해뒀던 것을 react가 html을 밀어넣게 됨!\n//따라서 검사 해보면 div와 h1이 있지만 소스코드(index.html)에는 존재하지 않음\n//이 것이 react가 빠른 이유, virtual이고 존재하지 않기 때문 (virtual DOM(Document Object Model))\n\n//component는 HTML을 반환하는 함수\n\n//state는 보통 우리가 동적데이터와 함께 작업할 때 만들어져, 변하는 데이터, 존재하지 않는 데이터,\n//그리고 생겨나고 그러고선 사라지고 또는 변경된 데이터, 하나인 데이터 그리고 두개가 되고 또는 0이 되는 그런 종류의 것들\n//이게 dynamic data 그리고 이런 props는 우리는 돕지않아 우리가 필요한 건 state\n\n//function component는 function이고 뭔가를 return해 그리고 screen에 표시돼, class component는 class야\n//하지만 react component로 부터 확장되고 screen에 표시돼\n\n//map은 array의 각 item에서 function을 실행하는 array를 가지는 javascript function이며\n//그 function의 result를 갖는 array를 나에게 줌\n// const friends = [\"dal\", \"mark\", \"lynn\", \"japan guy\"];\n// friends.map(function(current){\n//   console.log(current);\n//   return 0;\n// })\n//\n//result:\n// dal\n// mark\n// lynn\n// japan guy\n// [0, 0, 0, 0]\n\n//start command -> npm start\n\n//npm run build임 npm build가 아니라 ","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n//import './index.css';\nimport App from \"./App\";\n//import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App /><Potato />\n//   </React.StrictMode>,\n//   document.getElementById(\"potato\")\n// );\n\nReactDOM.render(<App />, document.getElementById(\"potato\"));\n\n//react application은 한번에 하나의 component만 rendering 할 수 있음\n//따라서 모든 것은 application 안에 들어가야만 함\n//application 안에서 많은 component를 넣을 수 있어, 그리고 이러한 component안에 더 많은 component를 import할 수 있어\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n\n//component는 HTML을 반환하는 함수\n//<App /> -> 이 부분이 우리가 component를 사용하고자 할 때, component의 형태\n//react는 component를 사용해서 html처럼 작성하려는 경우에 필요\n//javascript와 HTML 사이의 이러한 조합을 jsx라고 부름\n"],"sourceRoot":""}